// scalping.js - –ì—Ä–∞–º–æ—Ç–Ω—ã–π –¢–ê –¥–ª—è –ü–î (Pussy Destroyer)

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Binance API ===
const BINANCE_API_URL = "https://api.binance.com/api/v3/klines";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ ===
const timeframes = ["30m", "1h", "4h", "1d"];

// === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º ===
async function fetchMarketData(symbol, interval) {
    const url = `${BINANCE_API_URL}?symbol=${symbol}&interval=${interval}&limit=100`;
    const response = await fetch(url);
    const data = await response.json();
    return data.map(candle => ({
        time: candle[0],
        open: parseFloat(candle[1]),
        high: parseFloat(candle[2]),
        low: parseFloat(candle[3]),
        close: parseFloat(candle[4]),
        volume: parseFloat(candle[5])
    }));
}

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===
function calculateRSI(data, period = 14) {
    let gains = 0, losses = 0;
    for (let i = 1; i < period; i++) {
        let diff = data[i].close - data[i - 1].close;
        if (diff > 0) gains += diff;
        else losses -= diff;
    }
    let avgGain = gains / period;
    let avgLoss = losses / period;
    let rs = avgGain / avgLoss;
    return 100 - (100 / (1 + rs));
}

function calculateMACD(data, shortPeriod = 12, longPeriod = 26, signalPeriod = 9) {
    function calculateEMA(data, period) {
        const multiplier = 2 / (period + 1);
        let ema = [];
        ema[0] = data[0].close;
        for (let i = 1; i < data.length; i++) {
            ema[i] = (data[i].close - ema[i - 1]) * multiplier + ema[i - 1];
        }
        return ema;
    }
    let shortEMA = calculateEMA(data, shortPeriod);
    let longEMA = calculateEMA(data, longPeriod);
    let macdLine = shortEMA.map((val, i) => val - longEMA[i]);
    let signalLine = calculateEMA(macdLine.slice(longPeriod), signalPeriod);
    let histogram = macdLine.slice(longPeriod).map((val, i) => val - signalLine[i]);
    return { macdLine, signalLine, histogram };
}

function calculateBollingerBands(data, period = 20, stdDevMultiplier = 2) {
    let upperBand = [], lowerBand = [], sma = [], stdDev = [];
    for (let i = period - 1; i < data.length; i++) {
        let slice = data.slice(i - period + 1, i + 1);
        let mean = slice.reduce((acc, val) => acc + val.close, 0) / period;
        let variance = slice.reduce((acc, val) => acc + Math.pow(val.close - mean, 2), 0) / period;
        let std = Math.sqrt(variance);
        sma.push(mean);
        stdDev.push(std);
        upperBand.push(mean + stdDevMultiplier * std);
        lowerBand.push(mean - stdDevMultiplier * std);
    }
    return { middle: sma, upper: upperBand, lower: lowerBand };
}

function calculateOBV(data) {
    let obv = [0];
    for (let i = 1; i < data.length; i++) {
        let direction = data[i].close > data[i - 1].close ? 1 : -1;
        obv.push(obv[i - 1] + direction * data[i].volume);
    }
    return obv;
}

function calculateStochastic(data, period = 14, smoothK = 3, smoothD = 3) {
    let kValues = [];
    for (let i = period - 1; i < data.length; i++) {
        let slice = data.slice(i - period + 1, i + 1);
        let high = Math.max(...slice.map(d => d.high));
        let low = Math.min(...slice.map(d => d.low));
        let k = ((data[i].close - low) / (high - low)) * 100;
        kValues.push(k);
    }
    let dValues = kValues.map((val, i, arr) =>
        arr.slice(Math.max(0, i - smoothD + 1), i + 1).reduce((a, b) => a + b, 0) / smoothD
    );
    return { k: kValues, d: dValues };
}

// === –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ ===
async function analyzeMarket(symbol) {
    console.log("üî• –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è", symbol);
    let data = await fetchMarketData(symbol, "30m");
    let indicators = {
        rsi: calculateRSI(data, 14),
        macd: calculateMACD(data, 12, 26, 9),
        bollinger: calculateBollingerBands(data, 20, 2),
        obv: calculateOBV(data),
        stochastic: calculateStochastic(data, 14, 3, 3),
    };
    generateSignal(symbol, indicators);
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ===
function generateSignal(symbol, indicators) {
    let signal = "–û–∂–∏–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–µ—Ç–∞–ø.";
    let argumentsList = [];
    let entry, stopLoss, takeProfit;

    if (indicators.rsi < 30) {
        signal = "–õ–æ–Ω–≥";
        entry = indicators.bollinger.lower[indicators.bollinger.lower.length - 1];
        stopLoss = entry * 0.98;
        takeProfit = entry * 1.05;
        argumentsList.push("RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö.");
    }
    if (indicators.rsi > 70) {
        signal = "–®–æ—Ä—Ç";
        entry = indicators.bollinger.upper[indicators.bollinger.upper.length - 1];
        stopLoss = entry * 1.02;
        takeProfit = entry * 0.95;
        argumentsList.push("RSI –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω. –í–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç –≤–Ω–∏–∑.");
    }

    console.log(`üî• [${symbol}] –°–∏–≥–Ω–∞–ª: ${signal}`);
    console.log("üìå –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞:", entry);
    console.log("üõë –°—Ç–æ–ø-–ª–æ—Å—Å:", stopLoss);
    console.log("üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:", takeProfit);
    console.log("üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã:", argumentsList.join(", "));

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    displaySignal(symbol, signal, entry, stopLoss, takeProfit, argumentsList);
}

// === –í—ã–≤–æ–¥ —Å–∏–≥–Ω–∞–ª–∞ –≤ UI ===
function displaySignal(symbol, signal, entry, stopLoss, takeProfit, argumentsList) {
    document.querySelector("#signal-box").innerHTML = `
        <h3>üî• Pump & Dump Club</h3>
        <p><strong>–°–∏–≥–Ω–∞–ª:</strong> ${signal}</p>
        <p><strong>–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞:</strong> $${entry.toFixed(2)}</p>
        <p><strong>–°—Ç–æ–ø-–ª–æ—Å—Å:</strong> $${stopLoss.toFixed(2)}</p>
        <p><strong>–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:</strong> $${takeProfit.toFixed(2)}</p>
        <p><strong>–ê—Ä–≥—É–º–µ–Ω—Ç—ã:</strong> ${argumentsList.join(", ")}</p>
    `;
}

console.log("üî• Scalping.js –∑–∞–≥—Ä—É–∂–µ–Ω!");
