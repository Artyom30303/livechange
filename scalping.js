// API Binance
const BINANCE_API_URL = 'https://api.binance.com/api/v3/klines';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä—ã–Ω–∫—É
async function fetchMarketData(symbol, interval, limit = 100) {
    try {
        const url = `${BINANCE_API_URL}?symbol=${symbol.toUpperCase()}&interval=${interval}&limit=${limit}`;
        const response = await fetch(url);
        const data = await response.json();
        return data.map(k => ({
            open: parseFloat(k[1]),
            high: parseFloat(k[2]),
            low: parseFloat(k[3]),
            close: parseFloat(k[4]),
            volume: parseFloat(k[5])
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance:", error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ RSI
function calculateRSI(closes, period = 14) {
    let gains = 0, losses = 0;
    for (let i = 1; i < period; i++) {
        let delta = closes[i] - closes[i - 1];
        if (delta > 0) gains += delta;
        else losses -= delta;
    }
    let avgGain = gains / period;
    let avgLoss = losses / period || 1;
    let rs = avgGain / avgLoss;
    return 100 - (100 / (1 + rs));
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
async function analyzeMarket(symbol, interval = '30m') {
    const marketData = await fetchMarketData(symbol, interval);
    if (!marketData || marketData.length < 50) {
        console.warn("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
        document.getElementById("signal").innerText = "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö";
        return;
    }

    const closes = marketData.map(d => d.close);
    const rsi = calculateRSI(closes);
    const currentPrice = closes[closes.length - 1];

    let signal = rsi < 30 ? "–õ–æ–Ω–≥" : rsi > 70 ? "–®–æ—Ä—Ç" : "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ";
    let argument = signal === "–õ–æ–Ω–≥" ? "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞" : 
                   signal === "–®–æ—Ä—Ç" ? "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ü–µ–Ω—ã" : 
                   "–¶–µ–Ω–∞ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ";

    document.getElementById("signal").innerText = signal;
    document.getElementById("entry").innerText = `$${(currentPrice * 1.002).toFixed(2)}`;
    document.getElementById("stoploss").innerText = `$${(currentPrice * 0.98).toFixed(2)}`;
    document.getElementById("take1").innerText = `$${(currentPrice * 1.03).toFixed(2)}`;
    document.getElementById("argument").innerText = argument;

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:", { symbol, signal, rsi: rsi.toFixed(2), currentPrice });
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ TradingView
document.addEventListener("DOMContentLoaded", () => {
    analyzeMarket("BTCUSDT");

    new TradingView.widget({
        "container_id": "tradingview_chart",
        "symbol": "BINANCE:BTCUSDT",
        "interval": "30",
        "theme": "light",
        "style": "1",
        "locale": "ru",
        "toolbar_bg": "#f1f3f6",
        "enable_publishing": false,
        "hide_top_toolbar": false,
        "allow_symbol_change": true,
        "show_popup_button": true,
        "width": "100%",
        "height": "500px"
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ –ø–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç
    const symbolSelect = document.getElementById("symbol_select");
    if (symbolSelect) {
        symbolSelect.addEventListener("change", (event) => {
            const selectedSymbol = event.target.value;
            analyzeMarket(selectedSymbol);
        });
    }
});
