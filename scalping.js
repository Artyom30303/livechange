// scalping.js - –ì—Ä–∞–º–æ—Ç–Ω—ã–π –¢–ê –¥–ª—è –ü–î (Pussy Destroyer)

// === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Binance API ===
const BINANCE_API_URL = "https://api.binance.com/api/v3/klines";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ ===
const timeframes = ["30m", "1h", "4h", "1d"];

// === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–≤–µ—á–∞–º ===
async function fetchMarketData(symbol, interval) {
    const url = `${BINANCE_API_URL}?symbol=${symbol}&interval=${interval}&limit=100`;
    const response = await fetch(url);
    const data = await response.json();
    return data.map((candle) => ({
        time: candle[0],
        open: parseFloat(candle[1]),
        high: parseFloat(candle[2]),
        low: parseFloat(candle[3]),
        close: parseFloat(candle[4]),
        volume: parseFloat(candle[5])
    }));
}

// === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ===
function calculateRSI(data, period) {
    let gains = 0, losses = 0;
    for (let i = 1; i < period; i++) {
        let diff = data[i].close - data[i - 1].close;
        if (diff > 0) gains += diff;
        else losses -= diff;
    }
    let avgGain = gains / period;
    let avgLoss = losses / period;
    let rs = avgGain / avgLoss;
    return 100 - (100 / (1 + rs));
}

function calculateMACD(data, shortPeriod, longPeriod, signalPeriod) {
    let shortEMA = calculateEMA(data, shortPeriod);
    let longEMA = calculateEMA(data, longPeriod);
    let macdLine = shortEMA.map((val, i) => val - longEMA[i]);
    let signalLine = calculateEMA(macdLine.slice(longPeriod), signalPeriod);
    let histogram = macdLine.slice(longPeriod).map((val, i) => val - signalLine[i]);
    return { macdLine: macdLine.slice(longPeriod), signalLine, histogram };
}

function calculateBollingerBands(data, period, stdDevMultiplier) {
    let upperBand = [], lowerBand = [], sma = [];
    for (let i = period - 1; i < data.length; i++) {
        let slice = data.slice(i - period + 1, i + 1);
        let mean = slice.reduce((acc, val) => acc + val.close, 0) / period;
        sma.push(mean);
        let variance = slice.reduce((acc, val) => acc + Math.pow(val.close - mean, 2), 0) / period;
        let std = Math.sqrt(variance);
        upperBand.push(mean + stdDevMultiplier * std);
        lowerBand.push(mean - stdDevMultiplier * std);
    }
    return { middle: sma, upper: upperBand, lower: lowerBand };
}

function calculateOBV(data) {
    let obv = [0];
    for (let i = 1; i < data.length; i++) {
        let direction = data[i].close > data[i - 1].close ? 1 : -1;
        obv.push(obv[i - 1] + direction * data[i].volume);
    }
    return obv;
}

function calculateStochastic(data, period, k) {
    let stochastic = [];
    for (let i = period - 1; i < data.length; i++) {
        let slice = data.slice(i - period + 1, i + 1);
        let high = Math.max(...slice.map(c => c.high));
        let low = Math.min(...slice.map(c => c.low));
        let kValue = ((data[i].close - low) / (high - low)) * 100;
        stochastic.push(kValue);
    }
    return stochastic;
}

// === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ===
function detectSupportResistance(data) {
    return detectPOC(data).concat(detectLiquidityClusters(data));
}

// === –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ===
function detectPatterns(data) {
    return ["–ì–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏", "–ö–ª–∏–Ω", "–§–ª–∞–≥", "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"].filter(pattern => detectPattern(data, pattern));
}

// === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ===
function generateSignal(data, indicators, supportResistance, patterns) {
    let signal = "–û–∂–∏–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–µ—Ç–∞–ø.";
    let arguments = [];
    
    let entry, stoploss, takeProfit;
    if (patterns.includes("–ì–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏")) {
        signal = "–®–æ—Ä—Ç";
        entry = data[data.length - 1].close;
        stoploss = entry * 1.02;
        takeProfit = entry * 0.98;
    }
    return { signal, entry, stoploss, takeProfit, arguments };
}

// === –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ ===
async function analyzeMarket(symbol) {
    console.log("üî• –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è", symbol);
    let data = await fetchMarketData(symbol, "1h");
    let indicators = {
        rsi: calculateRSI(data, 14),
        macd: calculateMACD(data, 12, 26, 9),
        bollinger: calculateBollingerBands(data, 20, 2),
        obv: calculateOBV(data),
        stochastic: calculateStochastic(data, 14, 3)
    };
    let supportResistance = detectSupportResistance(data);
    let patterns = detectPatterns(data);
    let signal = generateSignal(data, indicators, supportResistance, patterns);
    console.log("üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: ", signal);
    return signal;
}

console.log("üî• scalping.js –∑–∞–≥—Ä—É–∂–µ–Ω!");
